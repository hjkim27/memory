** autovacuum 설정
1. 설정값 수정
    alter system set autovacuum_vacuum_scale_factor = 0;
    alter system set autovacuum_vacuum_threshold = 50;

-- vacuum 이 필요한 테이블 확인 방법
    select relname, n_live_tup, n_dead_tup from pg_stat_user_tables where n_dead_tup != 0;

-- n_dead_tup 수가 아래 값보다 클 경우 autovacuum 이 수행됨
    [ 존재하는 tuple 수 * (autovacuum_vacuum_scale_factor ) + autovacuum_vacuum_threshold ]

-- autovacuum_vacuum_scale_factor 를 0으로 setting 하는 이유
    : 특정 테이블의 tuple 수가 많을 수록 한번에 많은 수를 vacuum 명령으로 처리하게 된다.
      너무 많은 양을 처리할 경우 문제가 생길 수 있어 적당량으로 끊어줄 필요가 있다.

2. autovacuum 설정 적용
    select pg_reload_conf();
    > 다시 select relname, n_live_tup, n_dead_tup from pg_stat_user_tables where n_dead_tup != 0; 를 조회하면 값이 줄어든 것을 알 수 있음


**  DB용량 확인
    select datname, pg_size_pretty(pg_database_size(datname)) from pg_database;


***********

psql  쿼리 업데이트 진행 중 /var/lib/postgresql 폴더의 크기가 점점 늘어나는 현상 발견
    - 현재 206G > 287G 로 증가한 것으로 확인되며, 계속 증가할 것으로 보임 :: 380G 까지 늘어난 것으로 확인하였다고 함.
------------------------------------------------------------------------------------------------------------------------------------------------
>> vacuum 작업 필요 이유
    1. 변경 또는 삭제된 자료들이 차지 하고 있는 디스크 공간을 다시 사용하기 위한 디스크 공간 확보 작업이 필요하다.
    2. PostgreSQL 쿼리 실행 계획기가 사용할 자료 통계 정보를 갱신할 필요가 있다.
    3. 인덱스 전용 검색 성능을 향상하는데 이용하는 실자료 지도(visibility map, vm) 정보를 갱신하는 작업이 필요하다.
    4. 트랜잭션 ID 겹침이나, 다중 트랙잭션 ID 겹침 상황으로 오래된 자료가 손실 될 가능성을 방지해야할 필요가 있다.

------------------------------------------------------------------------------------------------------------------------------------------------
표준 vacuum     
    : 기본적인 crud 가 실행되고 있어도 동시에 사용할 수 있음. / alter, create, drop 등은 불가능
vacuum full   
    : 해당 테이블(혹은 DB)에 대해 배타적잠금을 지정하기 떄문에 어떤 작업도 불가능
** vacuum 은 디스크 입출력 부하를 만들어 동시 작업중인 다른 세션으 성능을 떨어뜨림
    autovacuum 사용 
        >  꾸준히 빈 공간을 확보해 디스크의 용량을 어느 정도까지만 커지게 해 vacuum full 을 해야하는 상황을 방지